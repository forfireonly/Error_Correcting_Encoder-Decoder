type: edu
custom_name: stage5
files:
- name: test/CorrecterTest.java
  visible: false
  text: |+
    import correcter.Main;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.List;

    class TestClue {
        String input;
        String fileContent;

        TestClue(String input, String fileContent) {
            this.input = input;
            this.fileContent = fileContent;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        private static File received = null;
        private static File encoded = null;
        private static File decoded = null;

        public CorrecterTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("encode", "Eat more of these french buns!"),
                new TestClue("send",   "Eat more of these french buns!"),
                new TestClue("decode", "Eat more of these french buns!"),

                new TestClue("encode", "$ome rand0m messAge"),
                new TestClue("send",   "$ome rand0m messAge"),
                new TestClue("decode", "$ome rand0m messAge"),

                new TestClue("encode", "better call Saul 555-00-73!"),
                new TestClue("send",   "better call Saul 555-00-73!"),
                new TestClue("decode", "better call Saul 555-00-73!"),

                new TestClue("encode", "5548172 6548 225147 23656595 5155"),
                new TestClue("send",   "5548172 6548 225147 23656595 5155"),
                new TestClue("decode", "5548172 6548 225147 23656595 5155"),
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input)
                    .addFile("send.txt", testClues[i].fileContent));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String path = System.getProperty("user.dir");

            received = null;
            encoded = null;
            decoded = null;

            searchReceived(path, "received.txt");
            searchEncoded(path, "encoded.txt");
            searchDecoded(path, "decoded.txt");

            String correctFileBinary = toBinary(clue.fileContent.getBytes());
            String correctFileEncoded = encodeFile(correctFileBinary);

            String action = clue.input;

            if (action.equals("encode")) {

                if (encoded == null) {
                    return new CheckResult(false,
                        "Can't find encoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] encodedContent;
                FileInputStream encodedStream;

                try {
                    encodedStream = new FileInputStream(encoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    encodedContent = encodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String encodedBinary = toBinary(encodedContent);

                return new CheckResult(encodedBinary.equals(correctFileEncoded));
            }

            if (action.equals("send")) {

                if (received == null) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it " +
                            "down or make sure the name of file is correct.");
                }

                byte[] receivedContent;

                FileInputStream receivedStream;

                try {
                    receivedStream = new FileInputStream(received);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    receivedContent = receivedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String receivedBinary = toBinary(receivedContent);


                return checkDifference(receivedBinary, correctFileEncoded);
            }



            if (action.equals("decode")) {

                if (decoded == null) {
                    return new CheckResult(false,
                        "Can't find decoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] decodedContent;


                FileInputStream decodedStream;

                try {
                    decodedStream = new FileInputStream(decoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    decodedContent = decodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String decodedBinary = toBinary(decodedContent);

                if (!decodedBinary.equals(correctFileBinary)) {
                    return new CheckResult(false, "The decoded text must match initial text!");
                }

                return CheckResult.correct();
            }

            throw new RuntimeException("Can't check the program");
        }

        private static String toBinary(byte[] bytes) {
            StringBuilder sb = new StringBuilder(bytes.length * Byte.SIZE);
            for (int i = 0; i < Byte.SIZE * bytes.length; i++) {
                sb.append((bytes[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
            }
            return sb.toString();
        }

        private static byte[] fromBinary(String s) {
            int sLen = s.length();
            byte[] toReturn = new byte[(sLen + Byte.SIZE - 1) / Byte.SIZE];
            char c;
            for (int i = 0; i < sLen; i++)
                if ((c = s.charAt(i)) == '1')
                    toReturn[i / Byte.SIZE] = (byte) (toReturn[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));
                else if (c != '0')
                    throw new IllegalArgumentException();
            return toReturn;
        }

        private static void searchReceived(String dirName, String fileName) {
            File dir = new File(dirName);
            File[] list = dir.listFiles();

            if (list != null) {
                for (File f : list) {
                    if (f.isDirectory()) {
                        searchReceived(f.getAbsolutePath(), fileName);
                    } else if (f.getAbsolutePath().contains(fileName)) {
                        received = f;
                    }
                }
            }
        }

        private static void searchEncoded(String dirName, String fileName) {
            File dir = new File(dirName);
            File[] list = dir.listFiles();

            if (list != null) {
                for (File f : list) {
                    if (f.isDirectory()) {
                        searchEncoded(f.getAbsolutePath(), fileName);
                    } else if (f.getAbsolutePath().contains(fileName)) {
                        encoded = f;
                    }
                }
            }
        }

        private static void searchDecoded(String dirName, String fileName) {
            File dir = new File(dirName);
            File[] list = dir.listFiles();

            if (list != null) {
                for (File f : list) {
                    if (f.isDirectory()) {
                        searchDecoded(f.getAbsolutePath(), fileName);
                    } else if (f.getAbsolutePath().contains(fileName)) {
                        decoded = f;
                    }
                }
            }
        }

        private String encodeFile(String binaryString) {

            String encoded = "";

            for (int i = 0; i < binaryString.length(); i += 4) {

                if (i + 4 > binaryString.length()) {
                    throw new RuntimeException("Can't decode binary data");
                }

                int startSubIndex = i;
                int stopSubIndex = i + 4;

                String currSub = binaryString.substring(startSubIndex, stopSubIndex);

                String encodedPart;

                int parityBit1 = 0;
                int parityBit2 = 0;
                int parityBit4 = 0;

                if (currSub.charAt(0) == '1') {
                    parityBit1++;
                    parityBit2++;
                }

                if (currSub.charAt(1) == '1') {
                    parityBit1++;
                    parityBit4++;
                }

                if (currSub.charAt(2) == '1') {
                    parityBit2++;
                    parityBit4++;
                }

                if (currSub.charAt(3) == '1') {
                    parityBit1++;
                    parityBit2++;
                    parityBit4++;
                }

                encodedPart =
                    (parityBit1 % 2 == 1? "1": "0") +
                    (parityBit2 % 2 == 1? "1": "0") +
                    currSub.charAt(0) +
                    (parityBit4 % 2 == 1? "1": "0") +
                    currSub.charAt(1) +
                    currSub.charAt(2) +
                    currSub.charAt(3) +
                    "0";

                encoded += encodedPart;
            }

            return encoded;
        }

        private CheckResult checkDifference(String output, String correct) {
            if (output.isEmpty() && correct.isEmpty()) return CheckResult.correct();

            if (output.length() != correct.length()) {
                return new CheckResult(false,
                    "The program was expected to output " +
                        correct.length() / 8 +
                        " bytes, but output " +
                        output.length() / 8);
            }

            for (int i = 0; i < output.length(); i += 8) {
                String currOutputByte = output.substring(i, i+8);
                String currCorrectByte = correct.substring(i, i+8);

                int difference = 0;
                for (int j = 0; j < currCorrectByte.length(); j++) {
                    char currOutputBit = currOutputByte.charAt(j);
                    char currCorrectBit = currCorrectByte.charAt(j);

                    if (currCorrectBit != currOutputBit) {
                        difference++;
                    }
                }

                if (difference == 0) {
                    return new CheckResult(false,
                        "One of bytes from the input stayed the same but should be changed");
                }

                if (difference != 1) {
                    return new CheckResult(false,
                        "One of bytes from the input was changes in more than one bit");
                }
            }

            return CheckResult.correct();
        }
    }

  learner_created: false
- name: src/correcter/Main.java
  visible: true
  text: "package correcter;\nimport java.io.*;\nimport java.nio.file.Files;\nimport\
    \ java.nio.file.Paths;\nimport java.util.Random;\nimport java.util.Scanner;\n\n\
    public class Main {\n    private static byte[] bytes;\n\n\n\n    static void decodeFile(byte[]\
    \ bytes) throws IOException {\n\n        Files.deleteIfExists(Paths.get(\"decoded.txt\"\
    ));\n        StringBuilder binaryStringForDecoding = new StringBuilder();\n\n\
    \        for (byte currentByte : bytes) {\n            binaryStringForDecoding.append(String.format(\"\
    %8s\", Integer.toBinaryString(currentByte & 0xFF))\n                    .replace('\
    \ ', '0')).append(\" \"); //converting byte array into string of 1 and 0\n   \
    \     }\n\n\n        String[] binaryStringArrayForDecoding = String.valueOf(binaryStringForDecoding).split(\"\
    \ \");\n\n        StringBuilder binaryForDecoding = new StringBuilder();\n   \
    \     for (String each : binaryStringArrayForDecoding) {  //correcting string\
    \ based on parity\n            int j = 0;\n            String[] binaryByteString\
    \ = each.split(\"\");\n\n            if (binaryByteString[j].equals(binaryByteString[j\
    \ + 1])) {\n                binaryForDecoding.append(binaryByteString[j]);\n \
    \           } else {\n                binaryForDecoding.append(Integer.parseInt(binaryByteString[j\
    \ + 2]) ^ Integer.parseInt(binaryByteString[j + 4])\n                        ^\
    \ Integer.parseInt(binaryByteString[j + 6]));\n\n            }\n            if\
    \ (binaryByteString[j + 2].equals(binaryByteString[j + 3])) {\n              \
    \  binaryForDecoding.append(binaryByteString[j + 2]);\n\n            } else {\n\
    \                binaryForDecoding.append(Integer.parseInt(binaryByteString[j])\
    \ ^ Integer.parseInt(binaryByteString[j + 4])\n                        ^ Integer.parseInt(binaryByteString[j\
    \ + 6]));\n            }\n            if (binaryByteString[j + 4].equals(binaryByteString[j\
    \ + 5])) {\n                binaryForDecoding.append(binaryByteString[j + 4]);\n\
    \            } else {\n                binaryForDecoding.append(Integer.parseInt(binaryByteString[j])\
    \ ^ Integer.parseInt(binaryByteString[j + 2])\n                        ^ Integer.parseInt(binaryByteString[j\
    \ + 6]));\n            }\n\n        }\n\n        String[] binaryArrayForDecoding\
    \ = String.valueOf(binaryForDecoding).split(\"\");\n        StringBuilder text\
    \ = new StringBuilder();\n        for (int i = 0; i < binaryArrayForDecoding.length\
    \ -1; i += 8) {\n            int counter = 0;\n            StringBuilder character\
    \ = new StringBuilder();\n            while (counter <= 7) {\n               \
    \ character.append(binaryArrayForDecoding[i + counter]);\n                counter++;\n\
    \            }\n            int charCode = Integer.parseInt(String.valueOf(character),\
    \ 2);\n            String str = Character.toString((char) charCode);\n       \
    \     text.append(str);\n        }\n\n        try (CharArrayWriter contactWriter\
    \ = new CharArrayWriter();\n             FileWriter bc1 = new FileWriter(\"decoded.txt\"\
    );\n        ) {\n            contactWriter.write(String.valueOf(text));\n    \
    \        contactWriter.writeTo(bc1);\n        } catch (Exception e) {\n      \
    \      System.out.println(\"Something is wrong\");\n        }\n    }\n    static\
    \ void introduceErrorInBites(byte[] bytes) throws IOException {\n        Files.deleteIfExists(Paths.get(\"\
    received.txt\"));\n        Random r = new Random();\n\n        for (int i = 0;\
    \ i < bytes.length; i++) {\n            int randomIndex = r.nextInt(7);\n    \
    \        bytes[i] ^= 1 << randomIndex;\n        }\n\n            File outputFile\
    \ = new File(\"received.txt\");\n            try (FileOutputStream outputStream\
    \ = new FileOutputStream(outputFile, true);\n            ) {\n               \
    \ outputStream.write(bytes);\n            } catch (Exception e) {\n          \
    \      System.out.println(\"Something is wrong\");\n            }\n\n    }\n\n\
    \    public static String convertStringToBinary(String input) {\n\n        StringBuilder\
    \ result = new StringBuilder();\n        char[] chars = input.toCharArray();\n\
    \        for (char aChar : chars) {\n            result.append(\n            \
    \        String.format(\"%8s\", Integer.toBinaryString(aChar))   // char -> int,\
    \ auto-cast\n                            .replaceAll(\" \", \"0\")           \
    \              // zero pads\n            );\n        }\n        return result.toString();\n\
    \n    }\n\n    static void encodingText(String string) throws IOException {\n\n\
    \        Files.deleteIfExists(Paths.get(\"encoded.txt\"));\n\n        String binaryString\
    \ = convertStringToBinary(string);\n\n        StringBuilder binaryStringToEncode\
    \ = new StringBuilder();\n\n        for (int i = 0; i < binaryString.length();\
    \ i += 3) {\n            binaryStringToEncode.setLength(0);\n           // if\
    \ (i + 2 < binaryString.length()) {\n                binaryStringToEncode.append(binaryString.charAt(i)).append(binaryString.charAt(i));\n\
    \                int a = Integer.parseInt(String.valueOf(binaryString.charAt(i)));\n\
    \                int b = 0;\n                int c = 0;\n                if (i\
    \ + 1 >= binaryString.length()) {\n                    binaryStringToEncode.append(0).append(0);\n\
    \n                } else {\n                    binaryStringToEncode.append(binaryString.charAt(i\
    \ + 1)).append(binaryString.charAt(i + 1));\n                    b = Integer.parseInt(String.valueOf(binaryString.charAt(i\
    \ + 1)));\n                }\n                if (i + 2 >= binaryString.length())\
    \ {\n                    binaryStringToEncode.append(0).append(0);\n\n       \
    \         } else {\n                    binaryStringToEncode.append(binaryString.charAt(i\
    \ + 2)).append(binaryString.charAt(i + 2));\n                    c = Integer.parseInt(String.valueOf(binaryString.charAt(i\
    \ + 2)));\n                }\n\n                int d = (char) ((a + b + c) %\
    \ 2);\n                if (d == 1) {\n                    bi\0aryStringToEncode.append(\"\
    1\").append(\"1\");\n                } else {\n                    binaryStringToEncode.append(\"\
    0\").append(\"0\");\n                }\n\n                int j = (byte) Integer.parseInt(String.valueOf(binaryStringToEncode),\
    \ 2);\n                File outputFile = new File(\"encoded.txt\");\n        \
    \        try (FileOutputStream outputStream = new FileOutputStream(outputFile,\
    \ true);\n                ) {\n                    outputStream.write(j);\n  \
    \              } catch (Exception e) {\n                    System.out.println(\"\
    Something is wrong\");\n                }\n        }\n    }\n\n    public static\
    \ void main(String[] args) throws IOException {\n\n        Scanner scn = new Scanner(System.in);\n\
    \        System.out.print(\"Write a mode: \");\n        String choice = scn.next();\n\
    \n\n        switch (choice) {\n            case \"encode\":\n                StringBuilder\
    \ textForEncoding = new StringBuilder();\n                File fileForEncoding\
    \ = new File(\"send.txt\");\n                try (Scanner scanner = new Scanner(fileForEncoding))\
    \ {\n                    while (scanner.hasNext()) {\n                       \
    \ textForEncoding.append(scanner.nextLine());\n                    }\n       \
    \         } catch (FileNotFoundException e) {\n                    System.out.println(\"\
    No file\");\n                }\n\n                encodingText(textForEncoding.toString());\n\
    \n                break;\n            case \"decode\":\n                File fileForDecoding\
    \ = new File(\"received.txt\");\n                try (FileInputStream stream =\
    \ new FileInputStream(fileForDecoding)) {\n                    bytes = stream.readAllBytes();\n\
    \                } catch (Exception e) {\n                    System.out.println(\"\
    Error in reading the file: \" + fileForDecoding.getName());\n                }\n\
    \                decodeFile(bytes);\n                break;\n            case\
    \ \"send\":\n                File file = new File(\"encoded.txt\");\n        \
    \        try (FileInputStream stream = new FileInputStream(file)) {\n        \
    \            bytes = stream.readAllBytes();\n                } catch (Exception\
    \ e) {\n                    System.out.println(\"Error in reading the file: \"\
    \ + file.getName());\n                }\n                introduceErrorInBites(bytes);\n\
    \            default:\n\n        }\n\n    }\n}\n"
  learner_created: true
- name: received.txt
  visible: true
  text: "\x0e�\x1342���/�\b\x1c\b���\n��1\x04@��\x0e�28;@�\x10\x0e\x01 >/\b�2\n�;,\b\
    Ӱ�\a��1\x10\b�sO��48\x02��\x1f��|s��\nO�1#\x02\x01��/�2\x1c\x13���"
  learner_created: true
- name: encoded.txt
  visible: true
  learner_created: true
- name: decoded.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/58/stages/316/implement
status: Solved
record: -1
